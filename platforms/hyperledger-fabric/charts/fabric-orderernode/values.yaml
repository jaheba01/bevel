##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

global:
  #Provide the service account name which will be created.
  serviceAccountName: vault-auth  
  vault:
    #Provide the type of vault
    #Eg. type: hashicorp
    type: hashicorp
    #Provide the vaultrole for an organization
    #Eg. vaultrole: org1-vault-role
    role: vault-role
    #Provide the vault server address
    #Eg. vaultaddress: http://Vault-884963190.eu-west-1.elb.amazonaws.com
    address:
    #Provide the kubernetes auth backed configured in vault for an organization
    #Eg. authpath: supplychain
    authPath: supplychain
    #Provide the secret engine.
    secretEngine: secretsv2
    #Provide the vault path where the secrets will be stored
    secretPrefix: "data/supplychain"
    #Provide the imagesecretname for vault
    #Eg. imagesecretname: regcred
    imageSecretName: ""
    #Kuberenetes secret for vault ca.cert
    #Enable or disable TLS for vault communication if value present or not
    #Eg. tls: vaultca
    tls: 

  cluster:
    provider: aws  # choose from: minikube | aws | azure | gcp
    cloudNativeServices: false # only 'false' is implemented

  proxy:
    #This will be the proxy/ingress provider. Can have values "none" or "haproxy"
    #Eg. provider: "haproxy"
    provider: "haproxy"
    #This field contains the external URL of the organization
    #Eg. externalUrlSuffix: test.blockchaincloudpoc.com
    externalUrlSuffix: test.blockchaincloudpoc.com

catools:
  orgData:
    #Provide organization's name in lowercases
    #Eg. orgName: supplychain 
    orgName: supplychain
    #Provide organization's type (orderer or peer)
    #Eg. component_type: orderer
    type:
    #Provide organization's subject
    #Eg. "O=Orderer,L=51.50/-0.13/London,C=GB"
    componentSubject:
    #Provide organization's subject
    #Eg. "O=Orderer,L=51.50/-0.13/London,C=GB"
    certSubject:
    #Provide organization's country
    #Eg. UK
    componentCountry: UK
    #Provide organization's state
    #Eg. London
    componentState: London
    #Provide organization's location
    #Eg. Lodon
    componentLocation: Lodon

  #Provide orderer's names
  orderers:
    - orderer1   
    - orderer2 
    - orderer3

# HLF Network Version
network:
  version: 2.5.4

channel:
  # Provide the channel's name
  channel_name: Allchannel

image:
  #Provide the valid image name and version for fabric orderer
  #Eg.  orderer: hyperledger/fabric-orderer:1.4.0
  orderer: ghcr.io/hyperledger/bevel-fabric-orderer
  #Provide the valid image name and version to read certificates from vault server
  #Eg.alpineUtils: ghcr.io/hyperledger/bevel-alpine:latest
  alpineUtils: ghcr.io/hyperledger/bevel-alpine:latest
  #Provide the valid image name and version for healthCheck of kafka
  #Eg. healthCheck: busybox
  healthCheck: busybox
  
orderer:
  #Provide the logLevel for orderer deployment
  #Eg. logLevel: info
  logLevel: info
  #Provide the localMspId for orderer deployment
  #Eg. localMspId: supplychainMSP
  localMspId: supplychainMSP
  #Provide the value for tlsStatus to be true or false for orderer deployment
  #Eg. tlsStatus: true
  tlsStatus: true
  #Provide the interval in which the orderer to signal the connection has kept alive  
  #Eg. keepAliveServerInterval: 10s
  keepAliveServerInterval: 10s
  #Provide the address for orderer
  #Eg. address: orderer1.test.blockchaincloudpoc.com

consensus:
  #Provide name of the consensus. Currently support raft and kafka
  #Eg. name: raft
  name: raft
  
storage:
  #Provide the size for storage class
  #Eg. size: 512Mi
  size: 512Mi

service:
  #Provide the serviceType a peer
  #Eg. serviceType: NodePort
  serviceType: ClusterIP
  ports:
    grpc:
      #Provide a nodeport for orderer in the range of 30000-32767 (optional)
      #Eg. nodeport: 30001
      nodeport: 
      #Provide a cluster IP port for orderer to be exposed.
      #Eg. clusterIpPort: 7050
      clusterIpPort: 7050
    metrics:
      enabled: false
      clusterIpPort: 9443

kafka:
  #Provide the interval in seconds you want to iterate till all  kafka services to be ready
  #Eg. readinessCheckInterval: 5
  readinessCheckInterval: 5
  #Provide the threshold till you want to check if all specified kafka brokers are up and running
  #Eg. readinessThresHold: 4
  readinessThresHold: 4
  #Provide the kafka broker list
  #Eg.  brokers:
  #       - kafka-0.broker.org1-net.svc.cluster.local:9092
  #       - kafka-1.broker.org1-net.svc.cluster.local:9092
  #       - kafka-2.broker.org1-net.svc.cluster.local:9092
  #       - kafka-3.broker.org1-net.svc.cluster.local:9092
  brokers:

config:
  # Set limits and requests of pod  
  pod:  
    resources:
      limits:
      # Provide the limit memory for node
      # Eg. memory: 512M
        memory: 512M
      # Provide the limit cpu for node
      # Eg. cpu: 1
        cpu: 1
      requests:
      # Provide the requests memory for node
      # Eg. memory: 512M
        memory: 512M
      # Provide the requests cpu for node
      # Eg. cpu: 0.25
        cpu: 0.25

settings:
  # Flag to ensure the certificates configmaps are removed on helm uninstall
  removeConfigMapsOnDelete: true
  # Flag to ensure the certificates secrets are removed on helm uninstall
  removeCertsOnDelete: true
  # Flag indicating the creation of certificates. This flag must be set to true when installing the first orderer and false in the others.
  generateCertificates: true

healthCheck: 
  # The amount of times to retry fetching from/writing to Vault before giving up.
  # Eg. retries: 10
  retries: 10
  # The amount of time in seconds to wait after an error occurs when fetching from/writing to Vault.
  # Eg. sleepTimeAfterError: 15  
  sleepTimeAfterError: 15

labels:
  service: []
  pvc: []
  deployment: []
