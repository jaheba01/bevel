##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

global:
  #Provide the service account name which will be created.
  serviceAccountName: vault-auth
  vault:
    #Provide the type of vault
    #Eg. type: hashicorp
    type: hashicorp
    #Provide the vaultrole for an organization
    #Eg. vaultrole: org1-vault-role
    role: vault-role
    #Provide the vault server address
    #Eg. vaultaddress: http://Vault-884963190.eu-west-1.elb.amazonaws.com
    address:
    #Provide the secret engine.
    secretEngine: secretsv2
    #Provide the vault path where the secrets will be stored
    secretPrefix: "data/supplychain"
    #Provide the imagesecretname for vault
    #Eg. imagesecretname: regcred
    imageSecretName: ""
    #Kuberenetes secret for vault ca.cert
    #Enable or disable TLS for vault communication if value present or not
    #Eg. tls: vaultca
    tls: 

  cluster:
    provider: aws  # choose from: minikube | aws | azure | gcp
    cloudNativeServices: false # only 'false' is implemented

  proxy:
    #This will be the proxy/ingress provider. Can have values "none" or "haproxy"
    #Eg. provider: "haproxy"
    provider: "none"
    #This field contains the external URL of the organization
    #Eg. externalUrlSuffix: test.blockchaincloudpoc.com
    externalUrlSuffix: test.blockchaincloudpoc.com
    #This field contains the external port on haproxy
    #Eg. port: 443
    port: 443

cli:
  #Creates a peer cli pod depending upon the (enabled/disabled) tag.  
  enabled: true
  #Provide the address for orderer
  #Eg. address: orderer1.test.blockchaincloudpoc.com:443
  address: orderer1.test.blockchaincloudpoc.com:443
  # HLF Network Version
  network:
    version: 2.5.4
  peer:
    #Provide the localMspId for organization
    #Eg. localMspId: supplychainMSP
    localMspId: supplychainMSP
    #Provide the value for tlsStatus to be true or false for organization's peer
    #Eg. tlsStatus: true
    tlsStatus: true
    #Provide the address for the peer
    #Eg: address: peer0.org1-net:7051
    address: test.blockchaincloudpoc.com:443
  healthCheck: 
    retries: 20
    sleepTimeAfterError: 15

catools:
  orgData:
    #Provide organization's name in lowercases
    #Eg. orgName: supplychain 
    orgName: supplychain
    #Provide organization's type (orderer or peer)
    #Eg. component_type: orderer
    type:
    #Provide organization's subject
    #Eg. "O=Orderer,L=51.50/-0.13/London,C=GB"
    componentSubject:
    #Provide organization's subject
    #Eg. "O=Orderer,L=51.50/-0.13/London,C=GB"
    certSubject:
    #Provide organization's country
    #Eg. UK
    componentCountry: UK
    #Provide organization's state
    #Eg. London
    componentState: London
    #Provide organization's location
    #Eg. Lodon
    componentLocation: Lodon
  
  #Provide peer's names
  peers:
    - peer0-carrier

  users: 
    # Generating User Certificates with custom attributes using Fabric CA in Bevel for Peer Organizations
    usersList:
      - user:
        identity: user1
        attributes:
        - key: "hf.Revoker"
          value: "true"
      - user:
        identity: user2
        attributes:
        - key: "hf.Revoker"
          value: "true"
    #Base64 encoded list of users
    #Eg. IC0gdXNlcjoKICAgICAgICAgIGlkZW50aXR5OiB1c2VyMQogICAgICAgICAgYXR0cmlidXRlczoKICAgICAgICAgICAgLSBrZXk6IGtleTEKICAgICAgIgICAgICAgIC0ga2V5OiBrZXkyCiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlMgogICAgICAgIC0gdXNlcjoKICAgICAgICAgIGlkZW50aXR5OiB1c2VyMgogICAgICAgICAgYXR0cmlidXRlczoKICAgICAgICAgICAgLSBrZXk6IGtleTEKICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUxCiAgICAgICAgICAgIC0ga2V5OiBrZXkzCiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlMw==
    usersListAnsible:
    #Provides a list of user identities
    usersIdentities:
      - user1
      - user2

image:
  #Provide the valid image name and version for fabric couchdb
  #Eg. couchdb: hyperledger/fabric-couchdb:0.4.14
  couchdb: ghcr.io/hyperledger/bevel-fabric-couchdb
  #Provide the valid image name and version for fabric peer
  #Eg. hyperledger/fabric-peer:2.2.2
  peer: ghcr.io/hyperledger/bevel-fabric-peer
  #Provide the valid image name and version to read certificates from vault server 
  #Eg. alpineUtils: ghcr.io/hyperledger/bevel-alpine:latest
  alpineUtils: ghcr.io/hyperledger/bevel-alpine:latest
  #Provide the valid image name and version for fabric tools
  #Eg. fabrictools: hyperledger/fabric-tools:1.4.0
  fabricTools: ghcr.io/hyperledger/bevel-fabric-tools

peer:
  #Provide the url of gossipping peer and port to be mentioned is grpc cluster IP port
  #Eg. gossipPeerAddress: supplychain.svc.cluster.local:443
  gossipPeerAddress: supplychain.svc.cluster.local:443
  #Provide the url of gossip external endpoint and  port to be mentioned is haproxy https service port
  #Eg. gossipExternalEndpoint: supplychain:443
  gossipExternalEndpoint: supplychain.test.blockchaincloudpoc.com:443
  #Provide the logLevel for organization's peer
  #Eg. logLevel: info
  logLevel: info
  #Provide a valid chaincode builder image for Fabric
  #Eg. builder: hyperledger/fabric-ccenv:1.4.8
  builder: hyperledger/fabric-ccenv
  couchdb:
    #Provide the username for couchdb login
    #If couchdb username is provided, it is mandatory to provide password for the same
    #Eg. username: supplychain-user
    username: supplychain-user

  mspConfig:
    #Provide the members of the MSP in organizational unit identifiers
    #Eg.organizationalUnitIdentifiers:
    #     - client
    #     - peer
    # following for 2.2.x
    #     - admin
    #     - orderer
    organizationalUnitIdentifiers:
    nodeOUs:
      clientOUIdentifier:
        #Provide OU which will be used to identify node as client
        #Eg.organizationalUnitIdentifier: client
        organizationalUnitIdentifier: client
      peerOUIdentifier:
        #Provide OU which will be used to identify node as peer
        #Eg.organizationalUnitIdentifier: peer
        organizationalUnitIdentifier: peer
      # following for 2.2.x
      adminOUIdentifier:
        organizationalUnitIdentifier: admin
      ordererOUIdentifier:
        organizationalUnitIdentifier: orderer

storage:
  peer:
    #Provide the size for storage class
    #Eg. size: 512Mi
    size: 512Mi
  couchdb:
    #Provide the size for storage class
    #Eg. size: 512Mi
    size: 512Mi

service:
  #Provide the serviceType for a peer
  #Eg. serviceType: NodePort
  serviceType: ClusterIP 
  loadBalancerType: ""
  ports:
    grpc:
      #Provide a nodePort for grpc service in the range of 30000-32767 (optional)
      #Eg. nodePort: 30001
      nodePort:
      #Provide a cluster IP port for grpc service to be exposed
      #Eg. clusterIpPort: 7051
      clusterIpPort: 7051
    events:
      #Provide a nodePort for event service in the range of 30000-32767 (optional)
      #Eg. nodePort: 30002
      nodePort:
      #Provide a cluster IP port for event service to be exposed
      #Eg. clusterIpPort: 7053
      clusterIpPort: 7053
    couchdb:
      #Provide a nodePort for couchdb service in the range of 30000-32767 (optional)
      #Eg. nodePort: 30003
      nodePort:
      #Provide a cluster IP port for couchdb service to be exposed
      #Eg. clusterIpPort: 5984
      clusterIpPort: 5984
    metrics:
      enabled: false
      clusterIpPort: 9443

config:
  # Set limits and requests of pod  
  pod:  
    resources:
      limits:
      # Provide the limit memory for node
      # Eg. memory: 512M
        memory: 512M
      # Provide the limit cpu for node
      # Eg. cpu: 1
        cpu: 1
      requests:
      # Provide the requests memory for node
      # Eg. memory: 512M
        memory: 512M
      # Provide the requests cpu for node
      # Eg. cpu: 0.25
        cpu: 0.25

settings:
  # Flag to ensure the certificates configmaps are removed on helm uninstall
  removeConfigMapsOnDelete: true
  # Flag to ensure the certificates secrets are removed on helm uninstall
  removeCertsOnDelete: true
  # Flag indicating the creation of certificates. This flag must be set to true when installing the first peer and false in the others.
  generateCertificates: true

labels:
  service: []
  pvc: []
  deployment: []
